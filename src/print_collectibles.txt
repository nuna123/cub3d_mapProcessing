
/**
 * Callback function used to handle mouse actions.
 *
 * @param[in] button The mouse button/key pressed.
 * @param[in] action The mouse action that took place.
 * @param[in] mods The modifier keys pressed together with the mouse key.
 * @param[in] param Additional parameter to pass on to the function.
 */
// typedef void (*mlx_mousefunc)(mouse_key_t button, action_t action, modifier_key_t mods, void* param);

/**
 * Callback function used to handle raw mouse movement.
 *
 * @param[in] xpos The mouse x position.
 * @param[in] ypos The mouse y position.
 * @param[in] param Additional parameter to pass on to the function.
 */
// typedef void (*mlx_cursorfunc)(double xpos, double ypos, void* param);


/**
 * Returns the current, relative, mouse cursor position on the window, starting
 * from the top left corner.
 *
 * Negative values or values greater than window width or height
 * indicate that it is outside the window.
 *
 * @param[in] mlx The MLX instance handle.
 * @param[out] x The position.
 * @param[out] y The position.
 */
// void mlx_get_mouse_pos(mlx_t* mlx, int32_t* x, int32_t* y);
/**
 * Checks whether a mouse button is pressed or not.
 *
 * @param[in] mlx The MLX instance handle.
 * @param[in] key A specific mouse key. e.g MLX_MOUSE_BUTTON_0
 * @returns True or false if the mouse key is down or not.
 */
// bool mlx_is_mouse_down(mlx_t* mlx, mouse_key_t key);


/**
 * This function sets the mouse callback, which is called when a mouse
 * does any sort of action such as pressing a key.
 *
 * @param[in] mlx The MLX instance handle.
 * @param[in] func The mouse callback function.
 * @param[in] param An additional optional parameter.
 */

void *our_mousefunc(mouse_key_t button, action_t action, modifier_key_t mods, void* param)
{
	//check mouse pos
}

void mlx_mouse_hook(mlx_t* mlx, mlx_mousefunc func, void* param);